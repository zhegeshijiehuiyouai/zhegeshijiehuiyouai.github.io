<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>部署hexo+github个人博客（图文并茂）</title>
      <link href="/2020/01/31/bu-shu-hexo-github-ge-ren-bo-ke-tu-wen-bing-mao/"/>
      <url>/2020/01/31/bu-shu-hexo-github-ge-ren-bo-ke-tu-wen-bing-mao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文将演示如果通过mac部署hexo+github个人博客，如果你用的是windows，聪明的你一定可以类比完成</p></blockquote><h1 id="第一阶段：本地搭建"><a href="#第一阶段：本地搭建" class="headerlink" title="第一阶段：本地搭建"></a>第一阶段：本地搭建</h1><h2 id="1、安装node-js"><a href="#1、安装node-js" class="headerlink" title="1、安装node.js"></a>1、安装node.js</h2><p>登录 <a href="https://nodejs.org/" target="_blank" rel="noopener">https://nodejs.org/</a> ，下载 node.js 安装，这个安装完后 node 和 npm 就都有了<br>点击 LTS 版本下载</p><p>双击下载下来的 node-v12.14.1.pkg ，一直点击继续，来进行安装</p><p>使用 node -v 命令和 npm -v 命令验证</p><h2 id="2、安装cnpm"><a href="#2、安装cnpm" class="headerlink" title="2、安装cnpm"></a>2、安装cnpm</h2><p>如果不是 root 账户，必须用 sudo 提权</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3、使用cnpm安装hexo框架"><a href="#3、使用cnpm安装hexo框架" class="headerlink" title="3、使用cnpm安装hexo框架"></a>3、使用cnpm安装hexo框架</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> cnpm <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 hexo -v 命令验证</p><h2 id="4、创建博客目录并初始化"><a href="#4、创建博客目录并初始化" class="headerlink" title="4、创建博客目录并初始化"></a>4、创建博客目录并初始化</h2><p>创建目录</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> ~/Dev/blog <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> ~/Dev/blog  <span class="token comment" spellcheck="true"># 写给小白：~表示家目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果后面操作失败，直接删除 blog 目录即可<br>初始化目录</p><pre class="line-numbers language-bash"><code class="language-bash">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初始化过程中会有几个报错和警告，不要管它，有这个提示就表示可以了</p><h2 id="5、启动hexo，测试发布博客"><a href="#5、启动hexo，测试发布博客" class="headerlink" title="5、启动hexo，测试发布博客"></a>5、启动hexo，测试发布博客</h2><p>在 blog 的根目录下，使用命令启动 hexo</p><pre class="line-numbers language-bash"><code class="language-bash">hexo s  <span class="token comment" spellcheck="true"># s是start的简写，所以可以使用命令 hexo start</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>系统会提示使用 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 来访问博客，可以看到系统已经为我们生成了一篇博客，这篇博客已经介绍了 hexo 的常用命令</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new <span class="token string">"My New Post"</span>  <span class="token comment" spellcheck="true"># 创建一篇新博客</span>hexo server    <span class="token comment" spellcheck="true"># 启动hexo</span>hexo generate  <span class="token comment" spellcheck="true"># 生成静态网站</span>hexo deploy    <span class="token comment" spellcheck="true"># 部署静态网站到远端服务器</span><span class="token comment" spellcheck="true"># 我觉得这个命令也挺重要的，在 hexo g 前使用</span>hexo clean     <span class="token comment" spellcheck="true"># 删除生成的静态网页和缓存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在终端中使用 ctrl+c 组合键退出，现在来创建一篇新的博客</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~/Dev/bloghexo new <span class="token string">"第一篇自己写的博客"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>系统提示生成了一个.md文件，没错，hexo博客就是使用markdown标记语言写作博客的</p><pre class="line-numbers language-bash"><code class="language-bash">vim ~/Dev/blog/source/_posts/第一篇自己写的博客.md  <span class="token comment" spellcheck="true"># 编辑博客</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最终内容如下</p><p>重新生成静态网页并启动hexo</p><pre class="line-numbers language-bash"><code class="language-bash">hexo cleanhexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到刚才新发布的博客已经可以查看了</p><hr><h1 id="第二阶段：部署到github"><a href="#第二阶段：部署到github" class="headerlink" title="第二阶段：部署到github"></a>第二阶段：部署到github</h1><p>首先要有一个 github 账号，这里默认你已经有了，没有的话就去 <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a> 申请一个</p><h2 id="1、创建一个仓库并发布默认网站"><a href="#1、创建一个仓库并发布默认网站" class="headerlink" title="1、创建一个仓库并发布默认网站"></a>1、创建一个仓库并发布默认网站</h2><p>仓库名必须是  <strong>你的github账号名.github.io</strong></p><p>从这进入仓库的 settings</p><p>选择一个主题</p><p>选择完主题后会让确认默认页面，确认默认页面后，然后访问 <a href="https://zhegeshijiehuiyouai.github.io" target="_blank" rel="noopener">https://zhegeshijiehuiyouai.github.io</a> 就可以看到默认的网站了</p><h2 id="2、安装git部署插件"><a href="#2、安装git部署插件" class="headerlink" title="2、安装git部署插件"></a>2、安装git部署插件</h2><pre class="line-numbers language-bash"><code class="language-bash">cnpm <span class="token function">install</span> --save hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完毕</p><h2 id="3、编辑blog根目录的-config-yml文件"><a href="#3、编辑blog根目录的-config-yml文件" class="headerlink" title="3、编辑blog根目录的_config.yml文件"></a>3、编辑blog根目录的_config.yml文件</h2><p>注意这个 _config.yml 是 blog 根目录的，有些主题也有 _config.yml</p><pre class="line-numbers language-bash"><code class="language-bash">vim _config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到最下面的 deploy，修改如下</p><pre><code>deploy:  type: git  repo: https://github.com/zhegeshijiehuiyouai/zhegeshijiehuiyouai.github.io.git  branch: master</code></pre><p>repo 中填写的是刚才在 github 创建的仓库的地址，master 表示主分支。<br>这是 yaml 格式的文件，注意对齐。下级缩进可以使用多个空格，这里使用两个空格，同时注意有值的行，冒号后面有一个空格。</p><h2 id="4、推送刚才生成的网站到github"><a href="#4、推送刚才生成的网站到github" class="headerlink" title="4、推送刚才生成的网站到github"></a>4、推送刚才生成的网站到github</h2><pre class="line-numbers language-bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没有用命令行登录过 github，这是会让你输入 github 的账号密码，输入即可。<br>部署成功后，提示如下</p><p>此时刷新自己的 github 仓库，就会看到仓库中已经有内容了</p><h2 id="此时使用仓库名就可以访问到网站了，我的就是-http-zhegeshijiehuiyouai-github-io，看到刚才的默认网站已经变成我们生成的网站了"><a href="#此时使用仓库名就可以访问到网站了，我的就是-http-zhegeshijiehuiyouai-github-io，看到刚才的默认网站已经变成我们生成的网站了" class="headerlink" title="此时使用仓库名就可以访问到网站了，我的就是 http://zhegeshijiehuiyouai.github.io，看到刚才的默认网站已经变成我们生成的网站了"></a>此时使用仓库名就可以访问到网站了，我的就是 <a href="http://zhegeshijiehuiyouai.github.io，看到刚才的默认网站已经变成我们生成的网站了" target="_blank" rel="noopener">http://zhegeshijiehuiyouai.github.io，看到刚才的默认网站已经变成我们生成的网站了</a></h2><h1 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h1><h1 id="1、将github网站绑定到自己的域名"><a href="#1、将github网站绑定到自己的域名" class="headerlink" title="1、将github网站绑定到自己的域名"></a>1、将github网站绑定到自己的域名</h1><p>没有自己的域名也可以不管这节，直接用github提供的域名访问就是了，申请域名的话可以到阿里云的万网去注册，注意注册域名后要实名认证<br>首先在自己的域名下添加一条 CNAME 记录</p><p>在 github 的 settings 中的 GitHub Pages 的 Custom domain 中添加自己的域名</p><p>此时仓库根目录会生成一个文件：CNAME ，内容为刚刚填写的域名。但是如果我们重新使用 hexo 生成网站，并不会有这个文件，所以还需要到 blog/source 目录创建 CNAME</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~/Dev/blog/source<span class="token keyword">echo</span> <span class="token string">"chenzhangchi.com"</span> <span class="token operator">></span> CNAME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重新生成网站并发布，就可以使用 chenzhangchi.com 访问了</p><pre class="line-numbers language-bash"><code class="language-bash">hexo cleanhexo shexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="2、更换主题"><a href="#2、更换主题" class="headerlink" title="2、更换主题"></a>2、更换主题</h1><p>首先找一个hexo的主题，以下面这个为例</p><blockquote><p><a href="https://github.com/blinkfox/hexo-theme-matery.git" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery.git</a><br>将主题克隆到 themes 目录下，这个目录默认是有一个 landscape 主题的</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~/Dev/blog<span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery themes/matery<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下载完后，修改 _config.yml 文件修改主题</p><pre class="line-numbers language-bash"><code class="language-bash">vim _config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到 themes，将其由 landscape 修改为 matery</p><p>根据每个主题的要求进行修改后，在重新发布就可以了。需要注意的是，由于我们使用了 cnpm 来管理包，所以这些主题中如果有使用 npm 来安装模块的，要全部换成 cnpm 。</p><pre class="line-numbers language-bash"><code class="language-bash">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
